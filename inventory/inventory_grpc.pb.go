// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: inventory.proto

package inventory_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inventory_UpdateProductStock_FullMethodName  = "/inventory.Inventory/UpdateProductStock"
	Inventory_UpdateProduct_FullMethodName       = "/inventory.Inventory/UpdateProduct"
	Inventory_UpdateProductStatus_FullMethodName = "/inventory.Inventory/UpdateProductStatus"
	Inventory_AddProduct_FullMethodName          = "/inventory.Inventory/AddProduct"
	Inventory_CheckProductStock_FullMethodName   = "/inventory.Inventory/CheckProductStock"
	Inventory_ReserveProduct_FullMethodName      = "/inventory.Inventory/ReserveProduct"
	Inventory_ReleaseProduct_FullMethodName      = "/inventory.Inventory/ReleaseProduct"
)

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryClient interface {
	UpdateProductStock(ctx context.Context, in *UpdateProductStockRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProduct(ctx context.Context, in *ProductMasterRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProductStatus(ctx context.Context, in *ProductMasterRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	AddProduct(ctx context.Context, in *ProductMasterRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	CheckProductStock(ctx context.Context, in *CheckProductStockRequest, opts ...grpc.CallOption) (*CheckProductStockResponse, error)
	ReserveProduct(ctx context.Context, in *ReserveProductRequest, opts ...grpc.CallOption) (*ReserveProductResponse, error)
	ReleaseProduct(ctx context.Context, in *ReleaseProductRequest, opts ...grpc.CallOption) (*ReleaseProductResponse, error)
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) UpdateProductStock(ctx context.Context, in *UpdateProductStockRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, Inventory_UpdateProductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateProduct(ctx context.Context, in *ProductMasterRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, Inventory_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateProductStatus(ctx context.Context, in *ProductMasterRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, Inventory_UpdateProductStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) AddProduct(ctx context.Context, in *ProductMasterRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, Inventory_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) CheckProductStock(ctx context.Context, in *CheckProductStockRequest, opts ...grpc.CallOption) (*CheckProductStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckProductStockResponse)
	err := c.cc.Invoke(ctx, Inventory_CheckProductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ReserveProduct(ctx context.Context, in *ReserveProductRequest, opts ...grpc.CallOption) (*ReserveProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveProductResponse)
	err := c.cc.Invoke(ctx, Inventory_ReserveProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ReleaseProduct(ctx context.Context, in *ReleaseProductRequest, opts ...grpc.CallOption) (*ReleaseProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseProductResponse)
	err := c.cc.Invoke(ctx, Inventory_ReleaseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
// All implementations must embed UnimplementedInventoryServer
// for forward compatibility.
type InventoryServer interface {
	UpdateProductStock(context.Context, *UpdateProductStockRequest) (*ProductResponse, error)
	UpdateProduct(context.Context, *ProductMasterRequest) (*ProductResponse, error)
	UpdateProductStatus(context.Context, *ProductMasterRequest) (*ProductResponse, error)
	AddProduct(context.Context, *ProductMasterRequest) (*ProductResponse, error)
	CheckProductStock(context.Context, *CheckProductStockRequest) (*CheckProductStockResponse, error)
	ReserveProduct(context.Context, *ReserveProductRequest) (*ReserveProductResponse, error)
	ReleaseProduct(context.Context, *ReleaseProductRequest) (*ReleaseProductResponse, error)
	mustEmbedUnimplementedInventoryServer()
}

// UnimplementedInventoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServer struct{}

func (UnimplementedInventoryServer) UpdateProductStock(context.Context, *UpdateProductStockRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStock not implemented")
}
func (UnimplementedInventoryServer) UpdateProduct(context.Context, *ProductMasterRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedInventoryServer) UpdateProductStatus(context.Context, *ProductMasterRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStatus not implemented")
}
func (UnimplementedInventoryServer) AddProduct(context.Context, *ProductMasterRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedInventoryServer) CheckProductStock(context.Context, *CheckProductStockRequest) (*CheckProductStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProductStock not implemented")
}
func (UnimplementedInventoryServer) ReserveProduct(context.Context, *ReserveProductRequest) (*ReserveProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveProduct not implemented")
}
func (UnimplementedInventoryServer) ReleaseProduct(context.Context, *ReleaseProductRequest) (*ReleaseProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseProduct not implemented")
}
func (UnimplementedInventoryServer) mustEmbedUnimplementedInventoryServer() {}
func (UnimplementedInventoryServer) testEmbeddedByValue()                   {}

// UnsafeInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServer will
// result in compilation errors.
type UnsafeInventoryServer interface {
	mustEmbedUnimplementedInventoryServer()
}

func RegisterInventoryServer(s grpc.ServiceRegistrar, srv InventoryServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inventory_ServiceDesc, srv)
}

func _Inventory_UpdateProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_UpdateProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateProductStock(ctx, req.(*UpdateProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateProduct(ctx, req.(*ProductMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateProductStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateProductStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_UpdateProductStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateProductStatus(ctx, req.(*ProductMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AddProduct(ctx, req.(*ProductMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_CheckProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).CheckProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_CheckProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).CheckProductStock(ctx, req.(*CheckProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ReserveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ReserveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_ReserveProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ReserveProduct(ctx, req.(*ReserveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ReleaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ReleaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_ReleaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ReleaseProduct(ctx, req.(*ReleaseProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inventory_ServiceDesc is the grpc.ServiceDesc for Inventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProductStock",
			Handler:    _Inventory_UpdateProductStock_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Inventory_UpdateProduct_Handler,
		},
		{
			MethodName: "UpdateProductStatus",
			Handler:    _Inventory_UpdateProductStatus_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _Inventory_AddProduct_Handler,
		},
		{
			MethodName: "CheckProductStock",
			Handler:    _Inventory_CheckProductStock_Handler,
		},
		{
			MethodName: "ReserveProduct",
			Handler:    _Inventory_ReserveProduct_Handler,
		},
		{
			MethodName: "ReleaseProduct",
			Handler:    _Inventory_ReleaseProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
